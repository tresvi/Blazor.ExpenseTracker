@inject ICategoryService CategoryService
@inject IExpenseService ExpenseService
@inject IJSRuntime JSRuntime


<EditForm Model="@expense" OnValidSubmit="SaveExpense">
    <DataAnnotationsValidator/>
    <table class="table">
        <tbody>
        <tr>
            <td>Amount: </td>
            <td><InputNumber class="form-control col-sm-5" @bind-Value="@expense.Amount"> </InputNumber>
                <ValidationMessage For="@(()=> expense.Amount)"></ValidationMessage>
            </td>
        </tr>
        <tr>
            <td>Transaction Date:</td>
                <td>
                    <InputDate class="form-control col-sm-5" @bind-Value="@expense.TransactionDate"></InputDate>
                <ValidationMessage For="@(()=> expense.TransactionDate)" />
            </td>
        </tr>
        <tr>
            <td>Category:</td>
            <td>
                    <InputSelect class="form-control col-sm-5" @bind-Value="@expense.CategoryId">
                    @foreach (Category item in categories)
                    {
                            <option value="@item.Id">@item.Name</option>
                        }
                </InputSelect>
            </td>
        </tr>
        <tr>
            <td>Expense type:</td>
            <td>
                <InputSelect class="form-control col-sm-5" disabled="true" @bind-Value="@expense.ExpenseType">
                    <option value="@(ExpenseType.Income)">Income</option>
                    <option value="@(ExpenseType.Expense)">Expense</option>
                </InputSelect>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="text-align:center">
                <input type="submit" class="btn btn-success" value="@(expense.Id == 0 ? "Save": "Update")" />
                <input type="button" class="btn btn-secondary" value="Cancel" style="@GetCancelButtonStyle()" @onclick="Cancel"/>
                <input type="button" class="btn btn-danger" value="Delete" style="@GetCancelButtonStyle()" @onclick="DeleteExpense"/>
            </td>
        </tr>
        </tbody>
    </table>
</EditForm>

@code {
    //private Expense expense = new Expense();
    [CascadingParameter]
    protected Expense expense { get; set; }

    private IEnumerable<Category> categories = new List<Category>();

    [Parameter]
    public ExpenseType ExpenseType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAllCategories();

        if (expense.Id == 0)
        {
            expense.CategoryId = categories.FirstOrDefault().Id.ToString();
            expense.ExpenseType = ExpenseType;
        }
    }

    protected async Task SaveExpense()
    {
        await ExpenseService.SaveExpense(expense);
        ClearExpense();
        expense.SelectedExpenseChanged(expense);
    }

    protected string GetCancelButtonStyle()
    {
        return expense.Id == 0 ? "display:none" : "";
    }

    public void Cancel()
    {
        expense.Id = 0;
        expense.Amount = 0;
        expense.TransactionDate = DateTime.MinValue;
        expense.CategoryId = categories.FirstOrDefault().Id.ToString();
        expense.ExpenseType = ExpenseType;
    }

    private void ClearExpense()
    {
        expense.Id = 0;
        expense.Amount = 0;
        expense.TransactionDate = DateTime.MinValue;
        expense.CategoryId = categories.FirstOrDefault().Id.ToString();
        expense.ExpenseType = ExpenseType;
    }

    private async Task DeleteExpense()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await ExpenseService.DeleteExpense(expense.Id);
            expense.SelectedExpenseChanged(expense);
            ClearExpense();
        }
    }

}
